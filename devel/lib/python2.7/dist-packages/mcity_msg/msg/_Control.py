# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mcity_msg/Control.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Control(genpy.Message):
  _md5sum = "8991eb8db72ef6936a21cd28b0eaadf3"
  _type = "mcity_msg/Control"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float64 timestamp
int32 	count
float64 brake_cmd
float64 throttle_cmd
float64 steering_cmd
int16 	gear_cmd
int16 	turn_signal_cmd

 
"""
  __slots__ = ['timestamp','count','brake_cmd','throttle_cmd','steering_cmd','gear_cmd','turn_signal_cmd']
  _slot_types = ['float64','int32','float64','float64','float64','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,count,brake_cmd,throttle_cmd,steering_cmd,gear_cmd,turn_signal_cmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Control, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.count is None:
        self.count = 0
      if self.brake_cmd is None:
        self.brake_cmd = 0.
      if self.throttle_cmd is None:
        self.throttle_cmd = 0.
      if self.steering_cmd is None:
        self.steering_cmd = 0.
      if self.gear_cmd is None:
        self.gear_cmd = 0
      if self.turn_signal_cmd is None:
        self.turn_signal_cmd = 0
    else:
      self.timestamp = 0.
      self.count = 0
      self.brake_cmd = 0.
      self.throttle_cmd = 0.
      self.steering_cmd = 0.
      self.gear_cmd = 0
      self.turn_signal_cmd = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_di3d2h().pack(_x.timestamp, _x.count, _x.brake_cmd, _x.throttle_cmd, _x.steering_cmd, _x.gear_cmd, _x.turn_signal_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.timestamp, _x.count, _x.brake_cmd, _x.throttle_cmd, _x.steering_cmd, _x.gear_cmd, _x.turn_signal_cmd,) = _get_struct_di3d2h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_di3d2h().pack(_x.timestamp, _x.count, _x.brake_cmd, _x.throttle_cmd, _x.steering_cmd, _x.gear_cmd, _x.turn_signal_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.timestamp, _x.count, _x.brake_cmd, _x.throttle_cmd, _x.steering_cmd, _x.gear_cmd, _x.turn_signal_cmd,) = _get_struct_di3d2h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_di3d2h = None
def _get_struct_di3d2h():
    global _struct_di3d2h
    if _struct_di3d2h is None:
        _struct_di3d2h = struct.Struct("<di3d2h")
    return _struct_di3d2h
