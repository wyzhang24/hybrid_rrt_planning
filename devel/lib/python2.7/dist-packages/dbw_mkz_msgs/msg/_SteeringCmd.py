# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dbw_mkz_msgs/SteeringCmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SteeringCmd(genpy.Message):
  _md5sum = "076be04e947ae855b3617e6190e078b9"
  _type = "dbw_mkz_msgs/SteeringCmd"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Steering Wheel
float32 steering_wheel_angle_cmd        # rad, range -9.6 to 9.6
float32 steering_wheel_angle_velocity   # rad/s, range 0 to 17.5, 0 = maximum
float32 steering_wheel_torque_cmd       # Nm, range -8.0 to 8.0
uint8 cmd_type

# Enable
bool enable

# Clear driver overrides
bool clear

# Ignore driver overrides
bool ignore

# Disable the driver override audible warning
bool quiet

# Watchdog counter (optional)
uint8 count

# Command types
uint8 CMD_ANGLE=0
uint8 CMD_TORQUE=1

# Maximum values
float32 ANGLE_MAX=9.6     # rad, maximum angle
float32 VELOCITY_MAX=17.5 # rad/s, maximum velocity
float32 TORQUE_MAX=8.0    # Nm, maximum torque
"""
  # Pseudo-constants
  CMD_ANGLE = 0
  CMD_TORQUE = 1
  ANGLE_MAX = 9.6
  VELOCITY_MAX = 17.5
  TORQUE_MAX = 8.0

  __slots__ = ['steering_wheel_angle_cmd','steering_wheel_angle_velocity','steering_wheel_torque_cmd','cmd_type','enable','clear','ignore','quiet','count']
  _slot_types = ['float32','float32','float32','uint8','bool','bool','bool','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       steering_wheel_angle_cmd,steering_wheel_angle_velocity,steering_wheel_torque_cmd,cmd_type,enable,clear,ignore,quiet,count

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SteeringCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.steering_wheel_angle_cmd is None:
        self.steering_wheel_angle_cmd = 0.
      if self.steering_wheel_angle_velocity is None:
        self.steering_wheel_angle_velocity = 0.
      if self.steering_wheel_torque_cmd is None:
        self.steering_wheel_torque_cmd = 0.
      if self.cmd_type is None:
        self.cmd_type = 0
      if self.enable is None:
        self.enable = False
      if self.clear is None:
        self.clear = False
      if self.ignore is None:
        self.ignore = False
      if self.quiet is None:
        self.quiet = False
      if self.count is None:
        self.count = 0
    else:
      self.steering_wheel_angle_cmd = 0.
      self.steering_wheel_angle_velocity = 0.
      self.steering_wheel_torque_cmd = 0.
      self.cmd_type = 0
      self.enable = False
      self.clear = False
      self.ignore = False
      self.quiet = False
      self.count = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f6B().pack(_x.steering_wheel_angle_cmd, _x.steering_wheel_angle_velocity, _x.steering_wheel_torque_cmd, _x.cmd_type, _x.enable, _x.clear, _x.ignore, _x.quiet, _x.count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.steering_wheel_angle_cmd, _x.steering_wheel_angle_velocity, _x.steering_wheel_torque_cmd, _x.cmd_type, _x.enable, _x.clear, _x.ignore, _x.quiet, _x.count,) = _get_struct_3f6B().unpack(str[start:end])
      self.enable = bool(self.enable)
      self.clear = bool(self.clear)
      self.ignore = bool(self.ignore)
      self.quiet = bool(self.quiet)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f6B().pack(_x.steering_wheel_angle_cmd, _x.steering_wheel_angle_velocity, _x.steering_wheel_torque_cmd, _x.cmd_type, _x.enable, _x.clear, _x.ignore, _x.quiet, _x.count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.steering_wheel_angle_cmd, _x.steering_wheel_angle_velocity, _x.steering_wheel_torque_cmd, _x.cmd_type, _x.enable, _x.clear, _x.ignore, _x.quiet, _x.count,) = _get_struct_3f6B().unpack(str[start:end])
      self.enable = bool(self.enable)
      self.clear = bool(self.clear)
      self.ignore = bool(self.ignore)
      self.quiet = bool(self.quiet)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f6B = None
def _get_struct_3f6B():
    global _struct_3f6B
    if _struct_3f6B is None:
        _struct_3f6B = struct.Struct("<3f6B")
    return _struct_3f6B
