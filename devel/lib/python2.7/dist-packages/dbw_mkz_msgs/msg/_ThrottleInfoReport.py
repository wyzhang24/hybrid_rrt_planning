# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dbw_mkz_msgs/ThrottleInfoReport.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dbw_mkz_msgs.msg
import std_msgs.msg

class ThrottleInfoReport(genpy.Message):
  _md5sum = "6ed272050114755a930a6cf633944b48"
  _type = "dbw_mkz_msgs/ThrottleInfoReport"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# Throttle Pedal
float32 throttle_pc   # Throttle pedal percent, range 0 to 1
float32 throttle_rate # Throttle pedal change per second (1/s)
QualityFactor throttle_pedal_qf # Non-zero is limp-home

# Engine
float32 engine_rpm    # Engine Speed (rpm)

# Gear Num
GearNum gear_num      # Gear Number

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: dbw_mkz_msgs/QualityFactor
uint8 value

uint8 OK=0
uint8 EMPTY=1
uint8 CORRUPT=2
uint8 FAULT=3

================================================================================
MSG: dbw_mkz_msgs/GearNum
uint8 num

uint8 NONE=0
uint8 DRIVE_D01=1
uint8 DRIVE_D02=2
uint8 DRIVE_D03=3
uint8 DRIVE_D04=4
uint8 DRIVE_D05=5
uint8 DRIVE_D06=6
uint8 DRIVE_D07=7
uint8 DRIVE_D08=8
uint8 DRIVE_D09=9
uint8 DRIVE_D10=10
uint8 NEUTRAL=16
uint8 REVERSE_R01=17
uint8 REVERSE_R02=18
uint8 PARK=31"""
  __slots__ = ['header','throttle_pc','throttle_rate','throttle_pedal_qf','engine_rpm','gear_num']
  _slot_types = ['std_msgs/Header','float32','float32','dbw_mkz_msgs/QualityFactor','float32','dbw_mkz_msgs/GearNum']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,throttle_pc,throttle_rate,throttle_pedal_qf,engine_rpm,gear_num

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ThrottleInfoReport, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.throttle_pc is None:
        self.throttle_pc = 0.
      if self.throttle_rate is None:
        self.throttle_rate = 0.
      if self.throttle_pedal_qf is None:
        self.throttle_pedal_qf = dbw_mkz_msgs.msg.QualityFactor()
      if self.engine_rpm is None:
        self.engine_rpm = 0.
      if self.gear_num is None:
        self.gear_num = dbw_mkz_msgs.msg.GearNum()
    else:
      self.header = std_msgs.msg.Header()
      self.throttle_pc = 0.
      self.throttle_rate = 0.
      self.throttle_pedal_qf = dbw_mkz_msgs.msg.QualityFactor()
      self.engine_rpm = 0.
      self.gear_num = dbw_mkz_msgs.msg.GearNum()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2fBfB().pack(_x.throttle_pc, _x.throttle_rate, _x.throttle_pedal_qf.value, _x.engine_rpm, _x.gear_num.num))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.throttle_pedal_qf is None:
        self.throttle_pedal_qf = dbw_mkz_msgs.msg.QualityFactor()
      if self.gear_num is None:
        self.gear_num = dbw_mkz_msgs.msg.GearNum()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.throttle_pc, _x.throttle_rate, _x.throttle_pedal_qf.value, _x.engine_rpm, _x.gear_num.num,) = _get_struct_2fBfB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2fBfB().pack(_x.throttle_pc, _x.throttle_rate, _x.throttle_pedal_qf.value, _x.engine_rpm, _x.gear_num.num))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.throttle_pedal_qf is None:
        self.throttle_pedal_qf = dbw_mkz_msgs.msg.QualityFactor()
      if self.gear_num is None:
        self.gear_num = dbw_mkz_msgs.msg.GearNum()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.throttle_pc, _x.throttle_rate, _x.throttle_pedal_qf.value, _x.engine_rpm, _x.gear_num.num,) = _get_struct_2fBfB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2fBfB = None
def _get_struct_2fBfB():
    global _struct_2fBfB
    if _struct_2fBfB is None:
        _struct_2fBfB = struct.Struct("<2fBfB")
    return _struct_2fBfB
